{"version":3,"sources":["bundle.js","app.module.js","notes/notes-form/notes-form.module.js","notes/notes.module.js","sign-in/sign-in.module.js","sign-up/sign-up.module.js","users/users.module.js","constants.js","core/auth.interceptor.js","notes/notes-form/notes-form.controller.js","notes/notes.controller.js","notes/notes.service.js","notes/route-config.js","sign-in/sign-in.directive.js","sign-up/sign-up.directive.js","users/auth-token.service.js","users/current-user.service.js","users/profile.directive.js","users/route-config.js","users/user-links.directive.js","users/users.service.js"],"names":["_classCallCheck","instance","Constructor","TypeError","config","$urlRouterProvider","httpMethodInterceptorProvider","otherwise","whitelistDomain","run","$rootScope","$state","$on","go","angular","module","$inject","constant","AuthInterceptor","AuthToken","API_BASE","request","req","token","get","url","includes","headers","Authorization","authConfig","$httpProvider","interceptors","push","factory","NotesFormController","Flash","NotesService","clearForm","vm","note","title","body_html","save","_id","update","then","res","copy","data","create","message","noteId","destroy","undefined","this","find","params","controller","NotesController","$scope","notes","$http","getNotes","notesPromise","apiURI","service","post","unshift","put","removeById","id","i","length","splice","notesConfig","$stateProvider","state","templateUrl","controllerAs","resolve","notesLoaded","onExit","clear","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","directive","UsersService","SignInController","value","login","user","scope","bindToController","template","flash","SignUpController","Number","isInteger","dismiss","errors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","error","err","$window","localStorage","getItem","setItem","removeItem","CurrentUser","JSON","parse","stringify","UserProfileController","usersConfig","UserLinksController","signedIn","set","authToken"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';\n\n{\n  var config = function config($urlRouterProvider, httpMethodInterceptorProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n    httpMethodInterceptorProvider.whitelistDomain('localhost');\n  };\n\n  var run = function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', function () {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangeError', function () {\n      $state.go('sign-in');\n    });\n  };\n\n  angular.module('meganote', ['ui.router', 'ngFlash', 'textAngular', 'ng.httpLoader', 'meganote.notes', 'meganote.notesForm', 'meganote.signUp', 'meganote.signIn', 'meganote.users']).config(config).run(run);\n\n  config.$inject = ['$urlRouterProvider', 'httpMethodInterceptorProvider'];\n\n\n  run.$inject = ['$rootScope', '$state'];\n}\n'use strict';\n\n{\n  angular.module('meganote.notesForm', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.notes', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signIn', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signUp', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.users', []);\n}\n'use strict';\n\n{\n  angular.module('meganote').constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n'use strict';\n\n{\n  var AuthInterceptor = function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request: function request(req) {\n        var token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  };\n\n  var authConfig = function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  };\n\n  angular.module('meganote').factory('AuthInterceptor', AuthInterceptor).config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n\n\n  authConfig.$inject = ['$httpProvider'];\n}\n'use strict';\n\n{\n  var NotesFormController = function NotesFormController($state, Flash, NotesService) {\n    var vm = this;\n    vm.note = NotesService.find($state.params.noteId);\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function save() {\n      if (vm.note._id) {\n        NotesService.update(vm.note).then(function (res) {\n          vm.note = angular.copy(res.data.note);\n          Flash.create('success', res.data.message);\n        }, function () {\n          return Flash.create('danger', 'Oops! Something went wrong.');\n        });\n      } else {\n        NotesService.create(vm.note).then(function (res) {\n          vm.note = res.data.note;\n          Flash.create('success', res.data.message);\n          $state.go('notes.form', { noteId: vm.note._id });\n        }, function () {\n          return Flash.create('danger', 'Oops! Something went wrong.');\n        });\n      }\n    }\n\n    function destroy() {\n      NotesService.destroy(vm.note).then(function () {\n        return $state.go('notes.form', { noteId: undefined });\n      });\n    }\n  };\n\n  angular.module('meganote.notesForm').controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$state', 'Flash', 'NotesService'];\n}\n'use strict';\n\n{\n  var NotesController = function NotesController($scope, NotesService) {\n    var vm = this;\n    vm.notes = NotesService.notes;\n  };\n\n  angular.module('meganote.notes').controller('NotesController', NotesController);\n\n  NotesController.$inject = ['$scope', 'NotesService'];\n}\n'use strict';\n\n{\n  var NotesService = function NotesService($http, API_BASE) {\n    var apiURI = API_BASE + 'notes/';\n\n    var service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find\n    };\n\n    return service;\n\n    //////////////////////\n\n    function getNotes() {\n      var notesPromise = $http.get(apiURI);\n\n      notesPromise.then(function (res) {\n        return service.notes = res.data;\n      });\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      var notesPromise = $http.post(apiURI, {\n        note: note\n      });\n\n      notesPromise.then(function (res) {\n        return service.notes.unshift(res.data.note);\n      });\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      var notesPromise = $http.put('' + apiURI + note._id, {\n        note: note\n      });\n\n      notesPromise.then(function (res) {\n        service.removeById(res.data.note._id);\n        service.notes.unshift(res.data.note);\n      });\n\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      var notesPromise = $http.delete('' + apiURI + note._id);\n\n      notesPromise.then(function (res) {\n        return service.removeById(res.data.note._id);\n      });\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  };\n\n  angular.module('meganote.notes').factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n}\n'use strict';\n\n{\n  (function () {\n    var notesConfig = function notesConfig($stateProvider) {\n      $stateProvider.state('notes', {\n        url: '/notes',\n        templateUrl: 'notes/notes.html',\n        controller: 'NotesController',\n        controllerAs: 'vm',\n        resolve: {\n          notesLoaded: notesLoaded\n        },\n        data: {\n          title: 'Notes'\n        }\n      }).state('notes.form', {\n        url: '/:noteId',\n        templateUrl: 'notes/notes-form/notes-form.html',\n        controller: 'NotesFormController',\n        controllerAs: 'vm',\n        data: {\n          title: 'Notes'\n        },\n        onExit: ['Flash', function (Flash) {\n          Flash.clear();\n        }]\n      });\n    };\n\n    var notesLoaded = function notesLoaded(NotesService) {\n      return NotesService.getNotes();\n    };\n\n    angular.module('meganote.notes').config(notesConfig);\n\n    notesConfig.$inject = ['$stateProvider'];\n\n\n    notesLoaded.$inject = ['NotesService'];\n  })();\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signIn').directive('signIn', ['$state', 'UsersService', function ($state, UsersService) {\n    var SignInController = function () {\n      function SignInController() {\n        _classCallCheck(this, SignInController);\n      }\n\n      _createClass(SignInController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.login(vm.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          });\n        }\n      }]);\n\n      return SignInController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignInController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Welcome back!</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"username\"\\n                      ng-model=\"vm.user.username\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"password\">Password</label><br>\\n                    <input\\n                      type=\"password\"\\n                      name=\"password\"\\n                      ng-model=\"vm.user.password\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    Don\\'t have an account?\\n                    <a ui-sref=\"sign-up\">Sign up!</a>\\n                  </span>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signUp').directive('signUp', ['$state', 'Flash', 'UsersService', function ($state, Flash, UsersService) {\n\n    var flash = false;\n\n    var SignUpController = function () {\n      function SignUpController() {\n        _classCallCheck(this, SignUpController);\n\n        this.user = {};\n      }\n\n      _createClass(SignUpController, [{\n        key: 'submit',\n        value: function submit() {\n          if (Number.isInteger(flash)) {\n            Flash.dismiss(flash);\n            flash = false;\n          }\n          UsersService.create(this.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          }, function (res) {\n            var errors = '';\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.data.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var error = _step.value;\n\n                errors += '<li>' + error + '</li>';\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            flash = Flash.create('danger', '\\n                    <p>Oops! Something went wrong.</p>\\n                    <ul>' + errors + '</ul>\\n                  ');\n          });\n        }\n      }]);\n\n      return SignUpController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignUpController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'sign-up/sign-up.html'\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('AuthToken', ['$window', function ($window) {\n    var AuthToken = function () {\n      function AuthToken() {\n        _classCallCheck(this, AuthToken);\n\n        this.token = $window.localStorage.getItem('authToken');\n      }\n\n      _createClass(AuthToken, [{\n        key: 'set',\n        value: function set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.token;\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }]);\n\n      return AuthToken;\n    }();\n\n    return new AuthToken();\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('CurrentUser', ['$window', function ($window) {\n    var CurrentUser = function () {\n      function CurrentUser() {\n        _classCallCheck(this, CurrentUser);\n\n        this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n      }\n\n      _createClass(CurrentUser, [{\n        key: 'set',\n        value: function set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.user || {};\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return !!this.get()._id;\n        }\n      }]);\n\n      return CurrentUser;\n    }();\n\n    return new CurrentUser();\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userProfile', ['CurrentUser', 'UsersService', function (CurrentUser, UsersService) {\n    var UserProfileController = function () {\n      function UserProfileController() {\n        _classCallCheck(this, UserProfileController);\n\n        var vm = this;\n        vm.user = angular.copy(CurrentUser.get());\n      }\n\n      _createClass(UserProfileController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.update(vm.user);\n        }\n      }]);\n\n      return UserProfileController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserProfileController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Update Your Profile</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\\n                  <p>\\n                    <label for=\"name\">Full Name</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"name\"\\n                      autofocus=\"autofocus\"\\n                      ng-model=\"vm.user.name\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"username\"\\n                      ng-model=\"vm.user.username\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\\n                      Back to my notes\\n                    </a>\\n                  </span>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\n{\n  var usersConfig = function usersConfig($stateProvider) {\n    $stateProvider.state('sign-up', {\n      url: '/sign-up',\n      template: '<sign-up></sign-up>',\n      data: {\n        title: 'Sign Up'\n      },\n      onExit: ['Flash', function (Flash) {\n        Flash.clear();\n      }]\n    }).state('sign-in', {\n      url: '/sign-in',\n      template: '<sign-in></sign-in>',\n      data: {\n        title: 'Sign In'\n      }\n    }).state('user-profile', {\n      url: '/profile',\n      template: '<user-profile></user-profile>',\n      data: {\n        title: 'Profile'\n      }\n    });\n  };\n\n  angular.module('meganote.users').config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userLinks', ['AuthToken', 'CurrentUser', function (AuthToken, CurrentUser) {\n    var UserLinksController = function () {\n      function UserLinksController() {\n        _classCallCheck(this, UserLinksController);\n      }\n\n      _createClass(UserLinksController, [{\n        key: 'user',\n        value: function user() {\n          return CurrentUser.get();\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return CurrentUser.signedIn();\n        }\n      }, {\n        key: 'logout',\n        value: function logout() {\n          CurrentUser.clear();\n          AuthToken.clear();\n        }\n      }]);\n\n      return UserLinksController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserLinksController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"user-links\">\\n            <span ng-show=\"vm.signedIn()\">\\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\\n              |\\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\\n            </span>\\n            <span ng-show=\"!vm.signedIn()\">\\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\\n            </span>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('UsersService', ['$http', 'API_BASE', 'AuthToken', 'CurrentUser', function ($http, API_BASE, AuthToken, CurrentUser) {\n\n    var apiURI = API_BASE + 'users/';\n\n    var UsersService = function () {\n      function UsersService() {\n        _classCallCheck(this, UsersService);\n      }\n\n      _createClass(UsersService, [{\n        key: 'create',\n\n\n        // Sign Up\n        value: function create(user) {\n          return $http.post(apiURI, {\n            user: user\n          }).then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n        }\n\n        // Update profile\n\n      }, {\n        key: 'update',\n        value: function update(user) {\n          return $http.put('' + apiURI + user._id, {\n            user: user\n          }).then(function (res) {\n            return CurrentUser.set(res.data.user);\n          });\n        }\n\n        // Sign In\n\n      }, {\n        key: 'login',\n        value: function login(user) {\n          return $http.post(API_BASE + 'sessions', {\n            user: user\n          }).then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n        }\n      }]);\n\n      return UsersService;\n    }();\n\n    return new UsersService();\n  }]);\n}","{\n  angular.module('meganote', [\n    'ui.router',\n    'ngFlash',\n    'textAngular',\n    'ng.httpLoader',\n    'meganote.notes',\n    'meganote.notesForm',\n    'meganote.signUp',\n    'meganote.signIn',\n    'meganote.users'\n  ])\n    .config(config)\n    .run(run);\n\n  config.$inject = ['$urlRouterProvider', 'httpMethodInterceptorProvider'];\n  function config($urlRouterProvider, httpMethodInterceptorProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n    httpMethodInterceptorProvider.whitelistDomain('localhost');\n  }\n\n  run.$inject = ['$rootScope', '$state'];\n  function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', () => {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangeError', () => {\n      $state.go('sign-in');\n    });\n  }\n}\n","{\n  angular.module('meganote.notesForm', []);\n}\n","{\n  angular.module('meganote.notes', []);\n}\n","{\n  angular.module('meganote.signIn', []);\n}\n","{\n  angular.module('meganote.signUp', []);\n}\n","{\n  angular.module('meganote.users', []);\n}\n","{\n  angular.module('meganote')\n    .constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n","{\n  angular.module('meganote')\n    .factory('AuthInterceptor', AuthInterceptor)\n    .config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n  function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request(req) {\n        const token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  }\n\n  authConfig.$inject = ['$httpProvider'];\n  function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  }\n}\n","{\n  angular.module('meganote.notesForm')\n    .controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$state', 'Flash', 'NotesService'];\n  function NotesFormController($state, Flash, NotesService) {\n    const vm = this;\n    vm.note = NotesService.find($state.params.noteId);\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function save() {\n      if (vm.note._id) {\n        NotesService.update(vm.note)\n          .then(\n            res => {\n              vm.note = angular.copy(res.data.note);\n              Flash.create('success', res.data.message);\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          );\n      }\n      else {\n        NotesService.create(vm.note)\n          .then(\n            res => {\n              vm.note = res.data.note;\n              Flash.create('success', res.data.message);\n              $state.go('notes.form', { noteId: vm.note._id });\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          );\n      }\n    }\n\n    function destroy() {\n      NotesService.destroy(vm.note)\n        .then(\n          () => $state.go('notes.form', { noteId: undefined })\n        );\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .controller('NotesController', NotesController);\n\n  NotesController.$inject = ['$scope', 'NotesService'];\n  function NotesController($scope, NotesService) {\n    const vm = this;\n    vm.notes = NotesService.notes;\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n  function NotesService($http, API_BASE) {\n    const apiURI = `${API_BASE}notes/`;\n\n    const service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find,\n    };\n\n    return service;\n\n    //////////////////////\n\n    function getNotes() {\n      const notesPromise = $http.get(apiURI);\n\n      notesPromise\n        .then(res => service.notes = res.data);\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      const notesPromise = $http.post(apiURI, {\n        note: note\n      });\n\n      notesPromise\n        .then(res => service.notes.unshift(res.data.note));\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      const notesPromise = $http.put(`${apiURI}${note._id}`, {\n        note: note\n      });\n\n      notesPromise\n        .then(res => {\n          service.removeById(res.data.note._id);\n          service.notes.unshift(res.data.note);\n        });\n\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      const notesPromise = $http.delete(`${apiURI}${note._id}`);\n\n      notesPromise\n        .then(res => service.removeById(res.data.note._id));\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .config(notesConfig);\n\n  notesConfig.$inject = ['$stateProvider'];\n  function notesConfig($stateProvider) {\n    $stateProvider\n\n    .state('notes', {\n      url: '/notes',\n      templateUrl: 'notes/notes.html',\n      controller: 'NotesController',\n      controllerAs: 'vm',\n      resolve: {\n        notesLoaded: notesLoaded\n      },\n      data: {\n        title: 'Notes'\n      },\n    })\n\n    .state('notes.form', {\n      url: '/:noteId',\n      templateUrl: 'notes/notes-form/notes-form.html',\n      controller: 'NotesFormController',\n      controllerAs: 'vm',\n      data: {\n        title: 'Notes'\n      },\n      onExit: ['Flash', (Flash) => {\n        Flash.clear();\n      }],\n    });\n  }\n\n  notesLoaded.$inject = ['NotesService'];\n  function notesLoaded(NotesService) {\n    return NotesService.getNotes();\n  }\n}\n","{\n  angular.module('meganote.signIn')\n    .directive('signIn', [\n\n      '$state',\n      'UsersService',\n      ($state, UsersService) => {\n\n        class SignInController {\n          submit() {\n            var vm = this;\n            UsersService.login(vm.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined })\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignInController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Welcome back!</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"password\">Password</label><br>\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      ng-model=\"vm.user.password\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    Don't have an account?\n                    <a ui-sref=\"sign-up\">Sign up!</a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.signUp')\n    .directive('signUp', [\n\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        let flash = false;\n        class SignUpController {\n          constructor() {\n            this.user = {};\n          }\n          submit() {\n            if (Number.isInteger(flash)) {\n              Flash.dismiss(flash);\n              flash = false;\n            }\n            UsersService.create(this.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined }),\n\n                (res) => {\n                  let errors = '';\n                  for (let error of res.data.errors) {\n                    errors += `<li>${error}</li>`;\n                  }\n                  flash = Flash.create('danger', `\n                    <p>Oops! Something went wrong.</p>\n                    <ul>${errors}</ul>\n                  `);\n                }\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignUpController,\n          controllerAs: 'vm',\n          bindToController: true,\n          templateUrl: 'sign-up/sign-up.html',\n        };\n      }\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('AuthToken', ['$window', $window => {\n\n      class AuthToken {\n        constructor() {\n          this.token = $window.localStorage.getItem('authToken');\n        }\n        set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n        get() {\n          return this.token;\n        }\n        clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }\n      return new AuthToken();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .service('CurrentUser', ['$window', $window => {\n\n      class CurrentUser {\n        constructor() {\n          this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n        }\n        set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n        get() {\n          return this.user || {};\n        }\n        clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n        signedIn() {\n          return !!this.get()._id;\n        }\n      }\n      return new CurrentUser();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .directive('userProfile', [\n\n      'CurrentUser',\n      'UsersService',\n      (CurrentUser, UsersService) => {\n\n        class UserProfileController {\n          constructor() {\n            var vm = this;\n            vm.user = angular.copy(CurrentUser.get());\n          }\n          submit() {\n            var vm = this;\n            UsersService.update(vm.user);\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserProfileController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Update Your Profile</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"name\">Full Name</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      autofocus=\"autofocus\"\n                      ng-model=\"vm.user.name\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\n                      Back to my notes\n                    </a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n  function usersConfig($stateProvider) {\n    $stateProvider\n\n      .state('sign-up', {\n        url: '/sign-up',\n        template: '<sign-up></sign-up>',\n        data: {\n          title: 'Sign Up'\n        },\n        onExit: ['Flash', (Flash) => {\n          Flash.clear();\n        }],\n      })\n\n      .state('sign-in', {\n        url: '/sign-in',\n        template: '<sign-in></sign-in>',\n        data: {\n          title: 'Sign In'\n        },\n      })\n\n      .state('user-profile', {\n        url: '/profile',\n        template: '<user-profile></user-profile>',\n        data: {\n          title: 'Profile'\n        },\n      });\n  }\n}\n","{\n  angular.module('meganote.users')\n    .directive('userLinks', [\n\n      'AuthToken',\n      'CurrentUser',\n      (AuthToken, CurrentUser) => {\n\n        class UserLinksController {\n          user() {\n            return CurrentUser.get();\n          }\n          signedIn() {\n            return CurrentUser.signedIn();\n          }\n          logout() {\n            CurrentUser.clear();\n            AuthToken.clear();\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserLinksController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"user-links\">\n            <span ng-show=\"vm.signedIn()\">\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\n              |\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\n            </span>\n            <span ng-show=\"!vm.signedIn()\">\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\n            </span>\n          </div>\n\n          `\n        };\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('UsersService', [\n      '$http',\n      'API_BASE',\n      'AuthToken',\n      'CurrentUser',\n      ($http, API_BASE, AuthToken, CurrentUser) => {\n\n        const apiURI = `${API_BASE}users/`;\n\n        class UsersService {\n\n          // Sign Up\n          create(user) {\n            return $http.post(apiURI, {\n              user,\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n          // Update profile\n          update(user) {\n            return $http.put(`${apiURI}${user._id}`, {\n              user\n            })\n              .then(\n                res => CurrentUser.set(res.data.user)\n              );\n          }\n\n          // Sign In\n          login(user) {\n            return $http.post(`${API_BASE}sessions`, {\n              user\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n        }\n        return new UsersService();\n\n      }\n    ]);\n}\n"],"sourceRoot":"/source/"}