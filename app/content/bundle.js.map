{"version":3,"sources":["bundle.js","app.module.js","notes/notes-form/notes-form.module.js","notes/notes.module.js","sign-in/sign-in.module.js","sign-up/sign-up.module.js","users/users.module.js","constants.js","core/auth.interceptor.js","notes/note.service.js","notes/notes-form/notes-form.controller.js","notes/notes.controller.js","notes/notes.service.js","notes/route-config.js","sign-in/sign-in.directive.js","sign-up/sign-up.directive.js","users/auth-token.service.js","users/current-user.service.js","users/profile.directive.js","users/route-config.js","users/user-links.directive.js","users/users.service.js"],"names":["_classCallCheck","instance","Constructor","TypeError","config","$urlRouterProvider","httpMethodInterceptorProvider","otherwise","whitelistDomain","run","$rootScope","$state","$on","go","angular","module","$inject","constant","AuthInterceptor","AuthToken","API_BASE","request","req","token","get","url","includes","headers","Authorization","authConfig","$httpProvider","interceptors","push","factory","Note","$resource","NotesFormController","$scope","Flash","params","noteId","id","clearForm","vm","note","title","body_html","save","_id","$save","then","$parent","refresh","create","destroy","this","controller","NotesController","query","$promise","notes","NotesService","$http","getNotes","notesPromise","apiURI","res","service","data","post","unshift","update","put","removeById","i","length","splice","find","copy","notesConfig","$stateProvider","state","templateUrl","controllerAs","resolve","authenticated","onExit","clear","CurrentUser","Promise","reject","signedIn","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","directive","UsersService","SignInController","value","login","user","undefined","scope","bindToController","template","flash","SignUpController","Number","isInteger","dismiss","errors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","error","err","$window","localStorage","getItem","setItem","removeItem","JSON","parse","stringify","UserProfileController","usersConfig","UserLinksController","set","authToken"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';\n\n{\n  var config = function config($urlRouterProvider, httpMethodInterceptorProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n    httpMethodInterceptorProvider.whitelistDomain('localhost');\n  };\n\n  var run = function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', function () {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangeError', function () {\n      $state.go('sign-in');\n    });\n  };\n\n  angular.module('meganote', ['ui.router', 'ngFlash', 'textAngular', 'ng.httpLoader', 'ngResource', 'meganote.notes', 'meganote.notesForm', 'meganote.signUp', 'meganote.signIn', 'meganote.users']).config(config).run(run);\n\n  config.$inject = ['$urlRouterProvider', 'httpMethodInterceptorProvider'];\n\n\n  run.$inject = ['$rootScope', '$state'];\n}\n'use strict';\n\n{\n  angular.module('meganote.notesForm', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.notes', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signIn', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.signUp', []);\n}\n'use strict';\n\n{\n  angular.module('meganote.users', []);\n}\n'use strict';\n\n{\n  angular.module('meganote').constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n'use strict';\n\n{\n  var AuthInterceptor = function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request: function request(req) {\n        var token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  };\n\n  var authConfig = function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  };\n\n  angular.module('meganote').factory('AuthInterceptor', AuthInterceptor).config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n\n\n  authConfig.$inject = ['$httpProvider'];\n}\n'use strict';\n\n{\n  var Note = function Note($resource, API_BASE) {\n    return $resource(API_BASE + 'notes/:id');\n  };\n\n  angular.module('meganote.notes').factory('Note', Note);\n\n  Note.$inject = ['$resource', 'API_BASE'];\n}\n'use strict';\n\n{\n  var NotesFormController = function NotesFormController($scope, $state, Flash, Note) {\n    var vm = this;\n    vm.note = get();\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////\n\n    function get() {\n      if ($state.params.noteId) {\n        return Note.get({ id: $state.params.noteId });\n      }\n      return new Note();\n    }\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function save() {\n      if (vm.note._id) {\n        //   NotesService.update(vm.note)\n        //     .then(\n        //       res => {\n        //         vm.note = angular.copy(res.data);\n        //         Flash.create('success', 'Saved!');\n        //       },\n        //       () => Flash.create('danger', 'Oops! Something went wrong.')\n        //     );\n      } else {\n        vm.note.$save().then(function (note) {\n          $scope.$parent.vm.refresh();\n          vm.note = note;\n          Flash.create('success', 'Saved!');\n          $state.go('notes.form', { noteId: vm.note._id });\n        }, function () {\n          return Flash.create('danger', 'Oops! Something went wrong.');\n        });\n      }\n    }\n\n    function destroy() {\n      // NotesService.destroy(vm.note)\n      //   .then(() => $state.go('notes.form', { noteId: undefined }));\n    }\n  };\n\n  angular.module('meganote.notesForm').controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$scope', '$state', 'Flash', 'Note'];\n}\n'use strict';\n\n{\n  var NotesController = function NotesController($scope, Note) {\n    var vm = this;\n    vm.notes = Note.query();\n    vm.refresh = refresh;\n\n    //////////////////////////\n\n    function refresh() {\n      Note.query().$promise.then(function (notes) {\n        vm.notes = notes;\n      });\n    }\n  };\n\n  angular.module('meganote.notes').controller('NotesController', NotesController);\n\n  NotesController.$inject = ['$scope', 'Note'];\n}\n'use strict';\n\n{\n  var NotesService = function NotesService($http, API_BASE) {\n    var apiURI = API_BASE + 'notes/';\n\n    var service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find\n    };\n\n    return service;\n\n    //////////////////////\n\n    function getNotes() {\n      var notesPromise = $http.get(apiURI);\n\n      notesPromise.then(function (res) {\n        return service.notes = res.data;\n      });\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      var notesPromise = $http.post(apiURI, note);\n\n      notesPromise.then(function (res) {\n        return service.notes.unshift(res.data);\n      });\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      var notesPromise = $http.put('' + apiURI + note._id, note);\n\n      notesPromise.then(function (res) {\n        service.removeById(res.data._id);\n        service.notes.unshift(res.data);\n      });\n\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      var notesPromise = $http.delete('' + apiURI + note._id);\n\n      notesPromise.then(function (res) {\n        return service.removeById(res.data._id);\n      });\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (var i = 0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  };\n\n  angular.module('meganote.notes').factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n}\n'use strict';\n\n{\n  (function () {\n    var notesConfig = function notesConfig($stateProvider) {\n      $stateProvider.state('notes', {\n        url: '/notes',\n        templateUrl: 'notes/notes.html',\n        controller: 'NotesController',\n        controllerAs: 'vm',\n        resolve: {\n          authenticated: authenticated\n        },\n        data: {\n          title: 'Notes'\n        }\n      }).state('notes.form', {\n        url: '/:noteId',\n        templateUrl: 'notes/notes-form/notes-form.html',\n        controller: 'NotesFormController',\n        controllerAs: 'vm',\n        data: {\n          title: 'Notes'\n        },\n        onExit: ['Flash', function (Flash) {\n          Flash.clear();\n        }]\n      });\n    };\n\n    var authenticated = function authenticated(CurrentUser) {\n      return new Promise(function (resolve, reject) {\n        if (CurrentUser.signedIn()) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    };\n\n    angular.module('meganote.notes').config(notesConfig);\n\n    notesConfig.$inject = ['$stateProvider'];\n\n\n    authenticated.$inject = ['CurrentUser'];\n  })();\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signIn').directive('signIn', ['$state', 'UsersService', function ($state, UsersService) {\n    var SignInController = function () {\n      function SignInController() {\n        _classCallCheck(this, SignInController);\n      }\n\n      _createClass(SignInController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.login(vm.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          });\n        }\n      }]);\n\n      return SignInController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignInController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Welcome back!</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"username\"\\n                      ng-model=\"vm.user.username\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"password\">Password</label><br>\\n                    <input\\n                      type=\"password\"\\n                      name=\"password\"\\n                      ng-model=\"vm.user.password\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    Don\\'t have an account?\\n                    <a ui-sref=\"sign-up\">Sign up!</a>\\n                  </span>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.signUp').directive('signUp', ['$state', 'Flash', 'UsersService', function ($state, Flash, UsersService) {\n\n    var flash = false;\n\n    var SignUpController = function () {\n      function SignUpController() {\n        _classCallCheck(this, SignUpController);\n\n        this.user = {};\n      }\n\n      _createClass(SignUpController, [{\n        key: 'submit',\n        value: function submit() {\n          if (Number.isInteger(flash)) {\n            Flash.dismiss(flash);\n            flash = false;\n          }\n          UsersService.create(this.user).then(function () {\n            return $state.go('notes.form', { noteId: undefined });\n          }, function (res) {\n            var errors = '';\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.data.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var error = _step.value;\n\n                errors += '<li>' + error + '</li>';\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            flash = Flash.create('danger', '\\n                    <p>Oops! Something went wrong.</p>\\n                    <ul>' + errors + '</ul>\\n                  ');\n          });\n        }\n      }]);\n\n      return SignUpController;\n    }();\n\n    return {\n      scope: {},\n      controller: SignUpController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'sign-up/sign-up.html'\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('AuthToken', ['$window', function ($window) {\n    var AuthToken = function () {\n      function AuthToken() {\n        _classCallCheck(this, AuthToken);\n\n        this.token = $window.localStorage.getItem('authToken');\n      }\n\n      _createClass(AuthToken, [{\n        key: 'set',\n        value: function set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.token;\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }]);\n\n      return AuthToken;\n    }();\n\n    return new AuthToken();\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('CurrentUser', ['$window', function ($window) {\n    var CurrentUser = function () {\n      function CurrentUser() {\n        _classCallCheck(this, CurrentUser);\n\n        this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n      }\n\n      _createClass(CurrentUser, [{\n        key: 'set',\n        value: function set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n      }, {\n        key: 'get',\n        value: function get() {\n          return this.user || {};\n        }\n      }, {\n        key: 'clear',\n        value: function clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return !!this.get()._id;\n        }\n      }]);\n\n      return CurrentUser;\n    }();\n\n    return new CurrentUser();\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userProfile', ['CurrentUser', 'UsersService', function (CurrentUser, UsersService) {\n    var UserProfileController = function () {\n      function UserProfileController() {\n        _classCallCheck(this, UserProfileController);\n\n        var vm = this;\n        vm.user = angular.copy(CurrentUser.get());\n      }\n\n      _createClass(UserProfileController, [{\n        key: 'submit',\n        value: function submit() {\n          var vm = this;\n          UsersService.update(vm.user);\n        }\n      }]);\n\n      return UserProfileController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserProfileController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"container\">\\n            <div class=\"row\">\\n              <div class=\"col-xs-6 col-xs-offset-4\">\\n                <h3>Update Your Profile</h3>\\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\\n                  <p>\\n                    <label for=\"name\">Full Name</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"name\"\\n                      autofocus=\"autofocus\"\\n                      ng-model=\"vm.user.name\"\\n                      required>\\n                  </p>\\n                  <p>\\n                    <label for=\"username\">Username</label><br>\\n                    <input\\n                      type=\"text\"\\n                      name=\"username\"\\n                      ng-model=\"vm.user.username\"\\n                      required>\\n                  </p>\\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\\n                  <span class=\"login\">\\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\\n                      Back to my notes\\n                    </a>\\n                  </span>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\n{\n  var usersConfig = function usersConfig($stateProvider) {\n    $stateProvider.state('sign-up', {\n      url: '/sign-up',\n      template: '<sign-up></sign-up>',\n      data: {\n        title: 'Sign Up'\n      },\n      onExit: ['Flash', function (Flash) {\n        Flash.clear();\n      }]\n    }).state('sign-in', {\n      url: '/sign-in',\n      template: '<sign-in></sign-in>',\n      data: {\n        title: 'Sign In'\n      }\n    }).state('user-profile', {\n      url: '/profile',\n      template: '<user-profile></user-profile>',\n      data: {\n        title: 'Profile'\n      }\n    });\n  };\n\n  angular.module('meganote.users').config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').directive('userLinks', ['AuthToken', 'CurrentUser', function (AuthToken, CurrentUser) {\n    var UserLinksController = function () {\n      function UserLinksController() {\n        _classCallCheck(this, UserLinksController);\n      }\n\n      _createClass(UserLinksController, [{\n        key: 'user',\n        value: function user() {\n          return CurrentUser.get();\n        }\n      }, {\n        key: 'signedIn',\n        value: function signedIn() {\n          return CurrentUser.signedIn();\n        }\n      }, {\n        key: 'logout',\n        value: function logout() {\n          CurrentUser.clear();\n          AuthToken.clear();\n        }\n      }]);\n\n      return UserLinksController;\n    }();\n\n    return {\n      scope: {},\n      controller: UserLinksController,\n      controllerAs: 'vm',\n      bindToController: true,\n      template: '\\n\\n          <div class=\"user-links\">\\n            <span ng-show=\"vm.signedIn()\">\\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\\n              |\\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\\n            </span>\\n            <span ng-show=\"!vm.signedIn()\">\\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\\n            </span>\\n          </div>\\n\\n          '\n    };\n  }]);\n}\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n{\n  angular.module('meganote.users').service('UsersService', ['$http', 'API_BASE', 'AuthToken', 'CurrentUser', function ($http, API_BASE, AuthToken, CurrentUser) {\n\n    var apiURI = API_BASE + 'users/';\n\n    var UsersService = function () {\n      function UsersService() {\n        _classCallCheck(this, UsersService);\n      }\n\n      _createClass(UsersService, [{\n        key: 'create',\n\n\n        // Sign Up\n        value: function create(user) {\n          return $http.post(apiURI, {\n            user: user\n          }).then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n        }\n\n        // Update profile\n\n      }, {\n        key: 'update',\n        value: function update(user) {\n          return $http.put('' + apiURI + user._id, {\n            user: user\n          }).then(function (res) {\n            return CurrentUser.set(res.data.user);\n          });\n        }\n\n        // Sign In\n\n      }, {\n        key: 'login',\n        value: function login(user) {\n          return $http.post(API_BASE + 'sessions', {\n            user: user\n          }).then(function (res) {\n            AuthToken.set(res.data.authToken);\n            CurrentUser.set(res.data.user);\n          });\n        }\n      }]);\n\n      return UsersService;\n    }();\n\n    return new UsersService();\n  }]);\n}","{\n  angular.module('meganote', [\n    'ui.router',\n    'ngFlash',\n    'textAngular',\n    'ng.httpLoader',\n    'ngResource',\n    'meganote.notes',\n    'meganote.notesForm',\n    'meganote.signUp',\n    'meganote.signIn',\n    'meganote.users'\n  ])\n    .config(config)\n    .run(run);\n\n  config.$inject = ['$urlRouterProvider', 'httpMethodInterceptorProvider'];\n  function config($urlRouterProvider, httpMethodInterceptorProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n    httpMethodInterceptorProvider.whitelistDomain('localhost');\n  }\n\n  run.$inject = ['$rootScope', '$state'];\n  function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', () => {\n      $rootScope.$state = $state;\n    });\n\n    $rootScope.$on('$stateChangeError', () => {\n      $state.go('sign-in');\n    });\n  }\n}\n","{\n  angular.module('meganote.notesForm', []);\n}\n","{\n  angular.module('meganote.notes', []);\n}\n","{\n  angular.module('meganote.signIn', []);\n}\n","{\n  angular.module('meganote.signUp', []);\n}\n","{\n  angular.module('meganote.users', []);\n}\n","{\n  angular.module('meganote')\n    .constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n","{\n  angular.module('meganote')\n    .factory('AuthInterceptor', AuthInterceptor)\n    .config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n  function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request(req) {\n        const token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  }\n\n  authConfig.$inject = ['$httpProvider'];\n  function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .factory('Note', Note);\n\n  Note.$inject = ['$resource', 'API_BASE'];\n  function Note($resource, API_BASE) {\n    return $resource(`${API_BASE}notes/:id`);\n  }\n}\n","{\n  angular.module('meganote.notesForm')\n    .controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$scope', '$state', 'Flash', 'Note'];\n  function NotesFormController($scope, $state, Flash, Note) {\n    const vm = this;\n    vm.note = get();\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////\n\n    function get() {\n      if ($state.params.noteId) {\n        return Note.get({ id: $state.params.noteId });\n      }\n      return new Note();\n    }\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function save() {\n      if (vm.note._id) {\n      //   NotesService.update(vm.note)\n      //     .then(\n      //       res => {\n      //         vm.note = angular.copy(res.data);\n      //         Flash.create('success', 'Saved!');\n      //       },\n      //       () => Flash.create('danger', 'Oops! Something went wrong.')\n      //     );\n      }\n      else {\n        vm.note.$save()\n          .then(\n            note => {\n              $scope.$parent.vm.refresh();\n              vm.note = note;\n              Flash.create('success', 'Saved!');\n              $state.go('notes.form', { noteId: vm.note._id });\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          );\n      }\n    }\n\n    function destroy() {\n      // NotesService.destroy(vm.note)\n      //   .then(() => $state.go('notes.form', { noteId: undefined }));\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .controller('NotesController', NotesController);\n\n  NotesController.$inject = ['$scope', 'Note'];\n  function NotesController($scope, Note) {\n    const vm = this;\n    vm.notes = Note.query();\n    vm.refresh = refresh;\n\n    //////////////////////////\n\n    function refresh() {\n      Note.query().$promise.then(notes => {\n        vm.notes = notes;\n      });\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n  function NotesService($http, API_BASE) {\n    const apiURI = `${API_BASE}notes/`;\n\n    const service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find,\n    };\n\n    return service;\n\n    //////////////////////\n\n    function getNotes() {\n      const notesPromise = $http.get(apiURI);\n\n      notesPromise\n        .then(res => service.notes = res.data);\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      const notesPromise = $http.post(apiURI, note);\n\n      notesPromise\n        .then(res => service.notes.unshift(res.data));\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      const notesPromise = $http.put(`${apiURI}${note._id}`, note);\n\n      notesPromise\n        .then(res => {\n          service.removeById(res.data._id);\n          service.notes.unshift(res.data);\n        });\n\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      const notesPromise = $http.delete(`${apiURI}${note._id}`);\n\n      notesPromise\n        .then(res => service.removeById(res.data._id));\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .config(notesConfig);\n\n  notesConfig.$inject = ['$stateProvider'];\n  function notesConfig($stateProvider) {\n    $stateProvider\n\n    .state('notes', {\n      url: '/notes',\n      templateUrl: 'notes/notes.html',\n      controller: 'NotesController',\n      controllerAs: 'vm',\n      resolve: {\n        authenticated,\n      },\n      data: {\n        title: 'Notes'\n      },\n    })\n\n    .state('notes.form', {\n      url: '/:noteId',\n      templateUrl: 'notes/notes-form/notes-form.html',\n      controller: 'NotesFormController',\n      controllerAs: 'vm',\n      data: {\n        title: 'Notes'\n      },\n      onExit: ['Flash', (Flash) => {\n        Flash.clear();\n      }],\n    });\n  }\n\n  authenticated.$inject = ['CurrentUser'];\n  function authenticated(CurrentUser) {\n    return new Promise((resolve, reject) => {\n      if (CurrentUser.signedIn()) { resolve(); }\n      else { reject(); }\n    });\n  }\n}\n","{\n  angular.module('meganote.signIn')\n    .directive('signIn', [\n\n      '$state',\n      'UsersService',\n      ($state, UsersService) => {\n\n        class SignInController {\n          submit() {\n            var vm = this;\n            UsersService.login(vm.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined })\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignInController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Welcome back!</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"password\">Password</label><br>\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      ng-model=\"vm.user.password\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    Don't have an account?\n                    <a ui-sref=\"sign-up\">Sign up!</a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.signUp')\n    .directive('signUp', [\n\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        let flash = false;\n        class SignUpController {\n          constructor() {\n            this.user = {};\n          }\n          submit() {\n            if (Number.isInteger(flash)) {\n              Flash.dismiss(flash);\n              flash = false;\n            }\n            UsersService.create(this.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined }),\n\n                (res) => {\n                  let errors = '';\n                  for (let error of res.data.errors) {\n                    errors += `<li>${error}</li>`;\n                  }\n                  flash = Flash.create('danger', `\n                    <p>Oops! Something went wrong.</p>\n                    <ul>${errors}</ul>\n                  `);\n                }\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignUpController,\n          controllerAs: 'vm',\n          bindToController: true,\n          templateUrl: 'sign-up/sign-up.html',\n        };\n      }\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('AuthToken', ['$window', $window => {\n\n      class AuthToken {\n        constructor() {\n          this.token = $window.localStorage.getItem('authToken');\n        }\n        set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n        get() {\n          return this.token;\n        }\n        clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }\n      return new AuthToken();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .service('CurrentUser', ['$window', $window => {\n\n      class CurrentUser {\n        constructor() {\n          this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n        }\n        set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n        get() {\n          return this.user || {};\n        }\n        clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n        signedIn() {\n          return !!this.get()._id;\n        }\n      }\n      return new CurrentUser();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .directive('userProfile', [\n\n      'CurrentUser',\n      'UsersService',\n      (CurrentUser, UsersService) => {\n\n        class UserProfileController {\n          constructor() {\n            var vm = this;\n            vm.user = angular.copy(CurrentUser.get());\n          }\n          submit() {\n            var vm = this;\n            UsersService.update(vm.user);\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserProfileController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Update Your Profile</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"name\">Full Name</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      autofocus=\"autofocus\"\n                      ng-model=\"vm.user.name\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\n                      Back to my notes\n                    </a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n  function usersConfig($stateProvider) {\n    $stateProvider\n\n      .state('sign-up', {\n        url: '/sign-up',\n        template: '<sign-up></sign-up>',\n        data: {\n          title: 'Sign Up'\n        },\n        onExit: ['Flash', (Flash) => {\n          Flash.clear();\n        }],\n      })\n\n      .state('sign-in', {\n        url: '/sign-in',\n        template: '<sign-in></sign-in>',\n        data: {\n          title: 'Sign In'\n        },\n      })\n\n      .state('user-profile', {\n        url: '/profile',\n        template: '<user-profile></user-profile>',\n        data: {\n          title: 'Profile'\n        },\n      });\n  }\n}\n","{\n  angular.module('meganote.users')\n    .directive('userLinks', [\n\n      'AuthToken',\n      'CurrentUser',\n      (AuthToken, CurrentUser) => {\n\n        class UserLinksController {\n          user() {\n            return CurrentUser.get();\n          }\n          signedIn() {\n            return CurrentUser.signedIn();\n          }\n          logout() {\n            CurrentUser.clear();\n            AuthToken.clear();\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserLinksController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"user-links\">\n            <span ng-show=\"vm.signedIn()\">\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\n              |\n              <a ui-sref=\"sign-in\" ng-click=\"vm.logout()\">Logout</a>\n            </span>\n            <span ng-show=\"!vm.signedIn()\">\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\n            </span>\n          </div>\n\n          `\n        };\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('UsersService', [\n      '$http',\n      'API_BASE',\n      'AuthToken',\n      'CurrentUser',\n      ($http, API_BASE, AuthToken, CurrentUser) => {\n\n        const apiURI = `${API_BASE}users/`;\n\n        class UsersService {\n\n          // Sign Up\n          create(user) {\n            return $http.post(apiURI, {\n              user,\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n          // Update profile\n          update(user) {\n            return $http.put(`${apiURI}${user._id}`, {\n              user\n            })\n              .then(\n                res => CurrentUser.set(res.data.user)\n              );\n          }\n\n          // Sign In\n          login(user) {\n            return $http.post(`${API_BASE}sessions`, {\n              user\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n        }\n        return new UsersService();\n\n      }\n    ]);\n}\n"],"sourceRoot":"/source/"}