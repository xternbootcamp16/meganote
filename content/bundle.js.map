{"version":3,"sources":["app.module.js","notes/notes-form/notes-form.module.js","notes/notes.module.js","sign-in/sign-in.module.js","sign-up/sign-up.module.js","users/users.module.js","constants.js","core/auth.interceptor.js","notes/notes-form/notes-form.controller.js","notes/notes.controller.js","notes/notes.service.js","notes/route-config.js","sign-in/sign-in.directive.js","sign-up/sign-up.directive.js","users/auth-token.service.js","users/current-user.service.js","users/profile.directive.js","users/route-config.js","users/user-links.directive.js","users/users.service.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["{\n  angular.module('meganote', [\n    'ui.router',\n    'ngFlash',\n    'textAngular',\n    'ng.httpLoader',\n    'meganote.notes',\n    'meganote.notesForm',\n    'meganote.signUp',\n    'meganote.signIn',\n    'meganote.users'\n  ])\n    .config(config)\n    .run(run);\n\n  config.$inject = ['$urlRouterProvider', 'httpMethodInterceptorProvider'];\n  function config($urlRouterProvider, httpMethodInterceptorProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n    httpMethodInterceptorProvider.whitelistDomain('localhost');\n  }\n\n  run.$inject = ['$rootScope', '$state'];\n  function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', () => {\n      $rootScope.$state = $state;\n    });\n  }\n}\n","{\n  angular.module('meganote.notesForm', []);\n}\n","{\n  angular.module('meganote.notes', []);\n}\n","{\n  angular.module('meganote.signIn', []);\n}\n","{\n  angular.module('meganote.signUp', []);\n}\n","{\n  angular.module('meganote.users', []);\n}\n","{\n  angular.module('meganote')\n    .constant('API_BASE', 'http://localhost:3030/api/v1/');\n}\n","{\n  angular.module('meganote')\n    .factory('AuthInterceptor', AuthInterceptor)\n    .config(authConfig);\n\n  AuthInterceptor.$inject = ['AuthToken', 'API_BASE'];\n  function AuthInterceptor(AuthToken, API_BASE) {\n    return {\n      request(req) {\n        const token = AuthToken.get();\n        if (token && req.url.includes(API_BASE)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  }\n\n  authConfig.$inject = ['$httpProvider'];\n  function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  }\n}\n","{\n  angular.module('meganote.notesForm')\n    .controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$state', 'Flash', 'NotesService'];\n  function NotesFormController($state, Flash, NotesService) {\n    const vm = this;\n    vm.note = NotesService.find($state.params.noteId);\n    vm.clearForm = clearForm;\n    vm.save = save;\n    vm.destroy = destroy;\n\n    /////////////////\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function save() {\n      if (vm.note._id) {\n        NotesService.update(vm.note)\n          .then(\n            res => {\n              vm.note = angular.copy(res.data.note);\n              Flash.create('success', res.data.message);\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          );\n      }\n      else {\n        NotesService.create(vm.note)\n          .then(\n            res => {\n              vm.note = res.data.note;\n              Flash.create('success', res.data.message);\n              $state.go('notes.form', { noteId: vm.note._id });\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          );\n      }\n    }\n\n    function destroy() {\n      NotesService.destroy(vm.note)\n        .then(\n          () => $state.go('notes.form', { noteId: undefined })\n        );\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .controller('NotesController', NotesController);\n\n  NotesController.$inject = ['$scope', 'NotesService'];\n  function NotesController($scope, NotesService) {\n    const vm = this;\n    vm.notes = NotesService.notes;\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'API_BASE'];\n  function NotesService($http, API_BASE) {\n    const apiURI = `${API_BASE}notes/`;\n\n    const service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      destroy: destroy,\n      removeById: removeById,\n      find: find,\n    };\n\n    return service;\n\n    //////////////////////\n\n    function getNotes() {\n      const notesPromise = $http.get(apiURI);\n\n      notesPromise\n        .then(res => service.notes = res.data);\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      const notesPromise = $http.post(apiURI, {\n        note: note\n      });\n\n      notesPromise\n        .then(res => service.notes.unshift(res.data.note));\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      const notesPromise = $http.put(`${apiURI}${note._id}`, {\n        note: note\n      });\n\n      notesPromise\n        .then(res => {\n          service.removeById(res.data.note._id);\n          service.notes.unshift(res.data.note);\n        });\n\n      return notesPromise;\n    }\n\n    function destroy(note) {\n      const notesPromise = $http.delete(`${apiURI}${note._id}`);\n\n      notesPromise\n        .then(res => service.removeById(res.data.note._id));\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  }\n}\n","{\n  angular.module('meganote.notes')\n    .config(notesConfig);\n\n  notesConfig.$inject = ['$stateProvider'];\n  function notesConfig($stateProvider) {\n    $stateProvider\n\n    .state('notes', {\n      url: '/notes',\n      templateUrl: 'notes/notes.html',\n      controller: 'NotesController',\n      controllerAs: 'vm',\n      resolve: {\n        notesLoaded: notesLoaded\n      },\n      data: {\n        title: 'Notes'\n      },\n    })\n\n    .state('notes.form', {\n      url: '/:noteId',\n      templateUrl: 'notes/notes-form/notes-form.html',\n      controller: 'NotesFormController',\n      controllerAs: 'vm',\n      data: {\n        title: 'Notes'\n      },\n      onExit: ['Flash', (Flash) => {\n        Flash.clear();\n      }],\n    });\n  }\n\n  notesLoaded.$inject = ['NotesService'];\n  function notesLoaded(NotesService) {\n    return NotesService.getNotes();\n  }\n}\n","{\n  angular.module('meganote.signIn')\n    .directive('signIn', [\n\n      '$state',\n      'UsersService',\n      ($state, UsersService) => {\n\n        class SignInController {\n          submit() {\n            var vm = this;\n            UsersService.login(vm.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined })\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignInController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Welcome back!</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"password\">Password</label><br>\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      ng-model=\"vm.user.password\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Sign In\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    Don't have an account?\n                    <a ui-sref=\"sign-up\">Sign up!</a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.signUp')\n    .directive('signUp', [\n\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        let flash = false;\n        class SignUpController {\n          constructor() {\n            this.user = {};\n          }\n          submit() {\n            if (Number.isInteger(flash)) {\n              Flash.dismiss(flash);\n              flash = false;\n            }\n            UsersService.create(this.user)\n              .then(\n                () => $state.go('notes.form', { noteId: undefined }),\n\n                (res) => {\n                  let errors = '';\n                  for (let error of res.data.errors) {\n                    errors += `<li>${error}</li>`;\n                  }\n                  flash = Flash.create('danger', `\n                    <p>Oops! Something went wrong.</p>\n                    <ul>${errors}</ul>\n                  `);\n                }\n              );\n          }\n        }\n\n        return {\n          scope: {},\n          controller: SignUpController,\n          controllerAs: 'vm',\n          bindToController: true,\n          templateUrl: 'sign-up/sign-up.html',\n        };\n      }\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('AuthToken', ['$window', $window => {\n\n      class AuthToken {\n        constructor() {\n          this.token = $window.localStorage.getItem('authToken');\n        }\n        set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n        get() {\n          return this.token;\n        }\n        clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }\n      return new AuthToken();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .service('CurrentUser', ['$window', $window => {\n\n      class CurrentUser {\n        constructor() {\n          this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n        }\n        set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n        get() {\n          return this.user || {};\n        }\n        clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n        signedIn() {\n          return !!this.get()._id;\n        }\n      }\n      return new CurrentUser();\n\n    }]);\n}\n","{\n  angular.module('meganote.users')\n    .directive('userProfile', [\n\n      'CurrentUser',\n      'UsersService',\n      (CurrentUser, UsersService) => {\n\n        class UserProfileController {\n          constructor() {\n            var vm = this;\n            vm.user = angular.copy(CurrentUser.get());\n          }\n          submit() {\n            var vm = this;\n            UsersService.update(vm.user);\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserProfileController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-xs-6 col-xs-offset-4\">\n                <h3>Update Your Profile</h3>\n                <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                  <p>\n                    <label for=\"name\">Full Name</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      autofocus=\"autofocus\"\n                      ng-model=\"vm.user.name\"\n                      required>\n                  </p>\n                  <p>\n                    <label for=\"username\">Username</label><br>\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      ng-model=\"vm.user.username\"\n                      required>\n                  </p>\n                  <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\n                  <span class=\"login\">\n                    <a ui-sref=\"notes.form({ noteId: undefined })\">\n                      Back to my notes\n                    </a>\n                  </span>\n                </form>\n              </div>\n            </div>\n          </div>\n\n\n          `,\n        };\n\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n  function usersConfig($stateProvider) {\n    $stateProvider\n\n      .state('sign-up', {\n        url: '/sign-up',\n        template: '<sign-up></sign-up>',\n        data: {\n          title: 'Sign Up'\n        },\n        onExit: ['Flash', (Flash) => {\n          Flash.clear();\n        }],\n      })\n\n      .state('sign-in', {\n        url: '/sign-in',\n        template: '<sign-in></sign-in>',\n        data: {\n          title: 'Sign In'\n        },\n      })\n\n      .state('user-profile', {\n        url: '/profile',\n        template: '<user-profile></user-profile>',\n        data: {\n          title: 'Profile'\n        },\n      });\n  }\n}\n","{\n  angular.module('meganote.users')\n    .directive('userLinks', [\n\n      'AuthToken',\n      'CurrentUser',\n      (AuthToken, CurrentUser) => {\n\n        class UserLinksController {\n          user() {\n            return CurrentUser.get();\n          }\n          signedIn() {\n            return CurrentUser.signedIn();\n          }\n          logout() {\n            CurrentUser.clear();\n            AuthToken.clear();\n          }\n        }\n\n        return {\n          scope: {},\n          controller: UserLinksController,\n          controllerAs: 'vm',\n          bindToController: true,\n          template: `\n\n          <div class=\"user-links\">\n            <span ng-show=\"vm.signedIn()\">\n              <a ui-sref=\"user-profile\">Signed in as {{ vm.user().name }}</a>\n              |\n              <a ui-sref=\"sign-up\" ng-click=\"vm.logout()\">Logout</a>\n            </span>\n            <span ng-show=\"!vm.signedIn()\">\n              <a ui-sref=\"sign-up\">Sign up for Meganote today!</a>\n            </span>\n          </div>\n\n          `\n        };\n      }\n\n    ]);\n}\n","{\n  angular.module('meganote.users')\n    .service('UsersService', [\n      '$http',\n      'API_BASE',\n      'AuthToken',\n      'CurrentUser',\n      ($http, API_BASE, AuthToken, CurrentUser) => {\n\n        const apiURI = `${API_BASE}users/`;\n\n        class UsersService {\n\n          // Sign Up\n          create(user) {\n            return $http.post(apiURI, {\n              user,\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n          // Update profile\n          update(user) {\n            return $http.put(`${apiURI}${user._id}`, {\n              user\n            })\n              .then(\n                res => CurrentUser.set(res.data.user)\n              );\n          }\n\n          // Sign In\n          login(user) {\n            return $http.post(`${API_BASE}sessions`, {\n              user\n            })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n        }\n        return new UsersService();\n\n      }\n    ]);\n}\n"],"sourceRoot":"/source/"}